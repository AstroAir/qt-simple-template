name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang-tidy \
          cppcheck \
          clang-format

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.7.0
        arch: gcc_64
        cache: true

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '4887ad6d1414f74cb7cb8d1e527fb46adb4e9ace'

    - name: Configure CMake with static analysis
      run: |
        cmake --preset Debug-Unix \
          -DENABLE_STATIC_ANALYSIS=ON

    - name: Build with static analysis
      run: cmake --build --preset Debug-Unix

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --suppress=unusedFunction \
          app/ controls/ 2> cppcheck-report.xml

    - name: Upload cppcheck results
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-report
        path: cppcheck-report.xml

  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format

    - name: Check formatting
      run: |
        find . -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | \
        xargs clang-format --dry-run --Werror

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          doxygen \
          graphviz \
          python3-pip
        pip3 install sphinx sphinx-rtd-theme

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.7.0
        arch: gcc_64
        cache: true

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '4887ad6d1414f74cb7cb8d1e527fb46adb4e9ace'

    - name: Configure CMake
      run: cmake --preset Debug-Unix -DBUILD_DOCS=ON

    - name: Build documentation
      run: cmake --build build/Debug --target docs

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: build/Debug/docs/

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/Debug/docs/doxygen/html

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: cpp

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.7.0
        arch: gcc_64
        cache: true

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '4887ad6d1414f74cb7cb8d1e527fb46adb4e9ace'

    - name: Configure and build
      run: |
        cmake --preset Debug-Unix
        cmake --build --preset Debug-Unix

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check for known vulnerabilities
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true

    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          lcov \
          libgl1-mesa-dev \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          xvfb

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.7.0
        arch: gcc_64
        cache: true

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '4887ad6d1414f74cb7cb8d1e527fb46adb4e9ace'

    - name: Configure CMake with coverage
      run: |
        cmake --preset Debug-Unix \
          -DENABLE_COVERAGE=ON

    - name: Build
      run: cmake --build --preset Debug-Unix

    - name: Start Xvfb
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: Run tests
      run: |
        cd build/Debug
        ctest --output-on-failure --parallel 4
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99

    - name: Generate coverage report
      run: |
        cd build/Debug
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --remove coverage.info '*/vcpkg_installed/*' --output-file coverage.info
        lcov --remove coverage.info '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: build/Debug/coverage.info
        flags: unittests
        name: codecov-umbrella
